File: bureaucrat.py, exception.py
First, we start by the smallest cog in the vast bureaucratic machine: the Bureaucrat. It must have a 
constant name (str), and a grade (int): that ranges from 1 (highest possible) to 150 (lowest possible). 
Any attempt to create a Bureaucrat with an invalid grade must throw an exception, which will be either 
a GradeTooHighException or a GradeTooLowException.
We want to be able to access the name and grade using the attribute name and grade. You will provide 
an overload of the right method so the following code will display: “[Bureaucrat name] grade: 
[Bureaucrat grade]”
Example
bureaucrat1 = Bureaucrat('Bob', 15)
print(bureaucrat1)
Will display → “Bob grade: 15”

Step 2
File: previous files, form.py
Make a Form class. It has a name (str), a is_signed (bool) indicating whether it is signed (at the 
beginning, it’s not), a grade_sign (int) required to sign it, and a grade_exec (int) required to execute it. The grades are subject to the same constraints as in the Bureaucrat, and exceptions will be thrown if any 
of them are out of bounds, GradeTooHighException and GradeTooLowException. Same as before, we want to access each attribute from their name (name, is_signed, etc.). When printing the instance, it will 
display: “[Form name] sign grade: [grade sign], exec grade: [grade exec], is signed: [True or False]”
Example
“Awesome Form sign grade: 80, exec grade: 40, is signed: False”
Step 3
File: previous files, concrete_forms.py 
Now that you have basic forms, you will make a few forms that actually do something. Create a few 
concrete forms. The name of the form and the class are the same:
ShrubberyCreationForm (Required grades: sign 145, exec 137). Action: Display “Shrubbery has been planted at [target]”.
RobotomyRequestForm (Required grades: sign 72, exec 45). Action: Display “[target] has been robotomized”
All of these will have to take only one parameter in their constructor, which will represent the target (str) of the form. For example, “home” if you want to plant a shrubbery at home. Now you need to add a method execute to the base class Form, that takes a Bureaucrat in parameter, and implement a method actually executing the form’s action in all the concrete forms. You have to check that the form is signed, and that the bureaucrat attempting to execute the form has a high enough grade, else you will throw an appropriate exception. Whether you want to make these checks in every concrete class or make the check in the base class then calling another method to actually execute the action is up to you, but one way is obviously prettier than the other one.
Finish this by adding a method execute_form that takes a Form to the bureaucrat. It must attempt to execute the form, and if it’s a success, print something like
“[Bureaucrat name] executes [Form name]”. If not, print an explicit error message.
Step 4
File: previous files, intern.py
You’re going to create the Intern class. The intern has no name, no grade, no defining characteristics whatsoever, we only care that he does the job. The intern has one important thing, the make_form 
function. The function takes two strings, the first representing the name of a form, and the second one being the target for the form. It will return the instance of the concrete form class that is represented by the first parameter, initialized with the second parameter. The function will print something like “Intern creates [Form name]” to the standard output. If the requested form is unknown, print an explicit error message and return None. Your code will be test as follow:
robotomy_form = Intern.make_form('RobotomyRequestForm', 'Bender')